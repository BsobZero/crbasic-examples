' TSI 4043 flowmeter example code
'
' Patrick O'Keeffe (c) 2017
' Laboratory for Atmospheric Research at Washington State University

ConstTable
  Const FLUSH_TUBE_ID = 0.251 'inches, I.D. of sampling line
  Const FLUSH_TUBE_LEN = 50   'ft, length of sampling line
EndConstTable

Const CR = CHR(13) 'carriage return
Const LF = CHR(10) 'line feed

Const TSI_COM = ComC3
Const TSI_BAUD = 38400
Const TSI_FORMAT = 3  '8/none/1 in "binary mode"
Const TSI_RECLEN = 23
Const TSI_BUFF = 2*TSI_RECLEN + 1
Const TSI_QUERY = "DCFTP0001"+CR 'request 1 CRLF delimited ascii record
Const TSI_RESPONSE = "OK"+CR+LF

Const TSI_STP_T = 21.1 'degC
Const TSI_STP_P = 101.3 'kPa
Const PI = 3.14159
Const L_PER_FT3 = 28.316847 'vol. conversion
Const R_AIR = 287.058   'specific gas constant for dry air, J/(kg K)
Const R_ = 8.3144621e-6 'universal gas constant, (kPa m^3)/(K mmol)
'part of Sutherland's fomula for deriving dynamic viscosity of air
Const SU_CONST = 120 'K
Const LAMBDA_AIR = 1.512041288 'uPa s K^-1/2
Const TUBE_AREA = PI*FLUSH_TUBE_ID*FLUSH_TUBE_ID/4 'in^2


'============================ VARIABLES =================================
Public tsi_bytes
Public tsi_record As String * TSI_RECLEN
Public disable_4043 As Boolean
Public tsi(3)
Alias tsi(1) = flush_massFlow
Alias tsi(2) = flush_tmpr
Alias tsi(3) = flush_press
Units flush_massFlow = sLpm
Units flush_tmpr = degC
Units flush_press = kPa

Public tube_volume
Public tsi_etc(3)
Alias tsi_etc(1) = flush_volFlow
Alias tsi_etc(2) = flush_delay
Alias tsi_etc(3) = flush_Re
Units flush_volFlow = L/min
Units flush_delay = sec
Units flush_Re = dimless


'================================= FUNCTIONS =================================
'TSI Models 4040/4043/4045 General Purpose Thermal Mass Flowmeter Operation
'    and Service Manual. Appendix B. August 2001. Revision D
'[StdFlow] = std L/min @ TSI specs, [Tmpr] = C, [Press] = kPa
Function volumetric_flow(StdFlow, Tmpr, Press) As Float 'Lpm
  Return (StdFlow * ((273.15+Tmpr)/(273.15+TSI_STP_T)) * (TSI_STP_P/Press))
EndFunction

'[VolFlow] = L/min
Function estimate_lag(VolFlow) As Float 'sec
  Return (60 * tube_volume / VolFlow))  '(60sec/min)(L)(min/L)
EndFunction

'https://en.wikipedia.org/wiki/Viscosity
'[Tmpr] = C
Function dynamic_viscosity(Tmpr) As Float 'kg/(m*s) = Pa*s
  '(uPa*s/K^1/2)(K^3/2)(1/K) * (Pa/10^6 uPa)
  Return (LAMBDA_AIR * (Tmpr+273.15)^1.5 / ((Tmpr+273.15+SU_CONST)*10^6))
EndFunction

'[Tmpr] = C, [Press] = kPa (abs.)
Function density_of_air(Tmpr, Press) As Float 'kg/m^3
  '(Pa/kPa)(kPa)(kg*K / J)(1/K)(J / Pa*m^3)
  Return (1000*Press / (R_AIR*(Tmpr+273.15)))
EndFunction

'https://en.wikipedia.org/wiki/Reynolds_number
'[VolFlow] = L/min, [Tmpr] = C, [Press] = kPa (abs.)
'HINT return as a Float but use FIX() to drop fractional portion
Function reynolds_num(VolFlow, Tmpr, Press) As Float 'dimless
  Dim mu, rho
  mu = dynamic_viscosity(Tmpr)
  rho = density_of_air(Tmpr, Press)
  '(kg/m^3)(L/min)(in)(m*s/kg)(1/in^2) * (min/60 sec)(39.37in/m)(m^3/1000L)
  Return Round((rho*VolFlow*FLUSH_TUBE_ID*39.37)/(mu*TUBE_AREA*60*1000), -1)
EndFunction


'============================== SUBROUTINES =================================
Sub setup_tsi4043()
  SerialOpen(TSI_COM,TSI_BAUD,TSI_FORMAT,0,TSI_BUFF)
  tube_volume = (FLUSH_TUBE_LEN * TUBE_AREA/144) * L_PER_FT3
  Move(tsi(1),3,NAN,1)
EndSub

'========================= MAIN PROGRAM =====================================
SequentialMode 'reqd for proper serial comms timing
BeginProg
  setup_tsi4043()

	Scan (1,Sec,0,0)
    SerialOut(TSI_COM,TSI_QUERY,TSI_RESPONSE,1,2) 'wait 20ms for ack response   
    Delay(0,20,msec) 'wait another 20ms for data message    
    tsi_bytes = SerialInBlock(TSI_COM,tsi_record,TSI_RECLEN)
    
    If (StrComp(Left(tsi_record,3),"ERR")) 'no match
      SplitStr(tsi(1),tsi_record,"",3,0)
      flush_volFlow = volumetric_flow(flush_massFlow, flush_tmpr, flush_press)
      flush_delay = IIF(tube_volume > 0, estimate_lag(flush_volFlow), NAN)
      flush_Re = IIF(flush_volFlow > 0, _
                      reynolds_num(flush_volFlow, flush_tmpr, flush_press), 0)
      disable_4043 = False
    Else
      Move(tsi(1),3,NAN,1)
      Move(tsi_etc(1),3,NAN,1)
      disable_4043 = True
    EndIf
	NextScan
EndProg

